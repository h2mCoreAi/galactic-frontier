{"type": "entity", "name": "Galactic Frontier", "entityType": "project", "observations": ["Space shooter game built with Phaser.js and Node.js", "Mono-repo structure with shared, single-player, and MMO components", "Currently in early development phase", "Uses PostgreSQL for data persistence", "Added comprehensive galactic-frontier-configs.json following Dragonspire structure", "Configuration includes all ports, database schema, environment variables, file paths", "Documents PM2 processes, network endpoints, API routes, and database tables", "Includes game mechanics, security settings, development config, and conflict prevention notes", "Based on postgresql-config.json and actual database schema with 4 tables: users, profiles, sp_highscores, sp_sessions", "Configuration file moved to global location: /srv/global-configs/galactic-frontier-configs.json", "Added GLOBAL-CONFIGS-README.md in repository as reference", "Memory graph exported to memory-bank.json for persistence", "Comprehensive documentation now available for resource usage and conflict prevention", "Added base game implementation as index.html with Canvas-based space shooter", "Game moved to single-player/src/ for proper project structure", "Includes working game mechanics: ship movement, enemy AI, projectiles, scoring, levels", "Canvas rendering with 500 stars, enemy types (small/medium/large), collision detection", "Mouse controls: rotate ship, left-click thrust, spacebar shoot, R to restart"]}
{"type": "entity", "name": "Project Structure", "entityType": "architecture", "observations": ["Root contains: shared/, assets/, core/, utils/, config/, single-player/, mmo/, tests/, docs/", "Single-player is primary focus with src/, leaderboard/, dashboard/ subdirs", "MMO component planned for future with client/ and server/ subdirs", "Configuration centralized in config/config.json", "Added GLOBAL-CONFIGS-README.md for external configuration references", "Memory-bank.json created for knowledge graph persistence", "Configuration file now located outside repository at /srv/global-configs/", ".gitignore file added with comprehensive ignore patterns for the full technology stack", ".gitignore file added with comprehensive ignore patterns for the full technology stack", "single-player/src/index.html contains the working game prototype", "nginx.conf created for production serving", "deploy-nginx.sh provides automated deployment", "logs/ directory created for server logs", "Game foundation ready for Phaser.js conversion", "nginx.conf deployed to /etc/nginx/sites-available/galactic-frontier", "Site enabled in /etc/nginx/sites-enabled/", "deploy-nginx.sh provides automated setup and configuration testing", "logs/ directory created for nginx access and error logs", "Static file serving configured for single-player/src/index.html"]}
{"type": "entity", "name": "Security Issues", "entityType": "security", "observations": ["Database password 'galactic_frontier' stored in plaintext", "CORS configured with wildcard '*' allowing all origins", "Connection strings exposed in configuration files", "No SSL/TLS configuration for database connections", "Discord OAuth credentials are placeholder but exposed"]}
{"type": "entity", "name": "Configuration Problems", "entityType": "configuration", "observations": ["File structure references don't match actual directory structure", "Config references 'singlePlayer/' but actual is 'single-player/'", "Config references 'shared/config.json' but actual is 'config/config.json'", "Ports listed in 'avoid' list are actually being used", "Missing environment-specific configurations", "Created galactic-frontier-configs.json to address configuration documentation needs", "Resolved file path mismatches by documenting actual project structure", "Added comprehensive resource usage documentation", "Included conflict prevention notes to avoid port/database conflicts"]}
{"type": "entity", "name": "Development Status", "entityType": "status", "observations": ["Git repository initialized with main and dev branches", "Basic directory structure created and committed", "README files added for all major directories", "Config.json created with game settings", "No actual game code implemented yet", "Added comprehensive .gitignore file with Node.js/TypeScript, build outputs, environment files, IDE/OS files, PM2 processes, database files, testing artifacts, and secrets", "Repository now properly configured for development with appropriate files ignored", "Added comprehensive .gitignore file with Node.js/TypeScript, build outputs, environment files, IDE/OS files, PM2 processes, database files, testing artifacts, and secrets", "Repository now properly configured for development with appropriate files ignored", "Base game file positioned in single-player/src/index.html", "Nginx configuration created for static file serving on port 5174", "Deployment script created for automated nginx setup", "API proxy configured for backend communication on port 3001", "Logs directory created for nginx access/error logs", "Nginx successfully deployed and configured for network access", "Game accessible at http://192.168.1.50:5174 from network", "Server responds on both localhost and network IP with proper headers", "Security headers, gzip compression, and caching enabled"]}
{"type": "entity", "name": "Database Config", "entityType": "database", "observations": ["PostgreSQL on port 5433", "Database name: galactic_frontier", "Username: galactic_frontier", "Uses raw SQL, no ORM", "Manual migration scripts planned", "4 database tables identified: users, profiles, sp_highscores, sp_sessions", "Users table: id, discord_id, auth_provider, username, email, created_at", "Profiles table: user_id, avatar_url, bio, total_score, level, updated_at", "SP Highscores: id, user_id, score, level_reached, play_time, timestamp", "SP Sessions: id, user_id, session_id, start_time, end_time, score"]}
{"type": "entity", "name": "Game Configuration", "entityType": "game_config", "observations": ["Ship settings: maxSpeed 5, thrust 0.1, maxHealth 100, size 20", "Three enemy types: small, medium, large with different stats", "Projectile settings: speed 7, fanShotCount 10, cooldown 10", "Game progression: scoreToLevelUp 250, spawn intervals configurable", "Power-ups: health (+10 HP), fan-shot (600 frames duration)"]}
{"type": "entity", "name": "Infrastructure", "entityType": "infrastructure", "observations": ["Nginx web server configured and deployed for static file serving", "PostgreSQL database running on port 5433 with 4 tables configured", "Game accessible via network at http://192.168.1.50:5174", "API proxy configured for backend communication on port 3001", "PM2 process manager available for application deployment", "Global configuration system implemented in /srv/global-configs/", "Automated deployment scripts created for nginx setup", "Comprehensive logging system with separate access/error logs"]}
{"type": "entity", "name": "Network Configuration", "entityType": "network", "observations": ["Frontend served on port 5174 with nginx reverse proxy", "Backend API expected on port 3001 for /api/, /auth/, /health routes", "Database accessible on port 5433 from localhost", "CORS configured for specific origins (localhost:5174, 127.0.0.1:5174)", "WebSocket support configured for future real-time features", "Security headers enabled (CSP, XSS protection, frame options)", "Gzip compression active for improved performance"]}
{"type": "entity", "name": "Current Deployment", "entityType": "deployment", "observations": ["Game prototype deployed and accessible from network", "Base Canvas game converted to HTML5 with modern features", "Static file serving operational with proper caching", "Development environment fully configured", "Production nginx configuration ready for deployment", "Git repository with main/dev branches properly managed", "All configuration files documented and version controlled"]}
{"type": "entity", "name": "Infrastructure", "entityType": "infrastructure", "observations": ["Nginx web server configured and deployed for static file serving", "PostgreSQL database running on port 5433 with 4 tables configured", "Game accessible via network at http://192.168.1.50:5174", "API proxy configured for backend communication on port 3001", "PM2 process manager available for application deployment", "Global configuration system implemented in /srv/global-configs/", "Automated deployment scripts created for nginx setup", "Comprehensive logging system with separate access/error logs"]}
{"type": "entity", "name": "Network Configuration", "entityType": "network", "observations": ["Frontend served on port 5174 with nginx reverse proxy", "Backend API expected on port 3001 for /api/, /auth/, /health routes", "Database accessible on port 5433 from localhost", "CORS configured for specific origins (localhost:5174, 127.0.0.1:5174)", "WebSocket support configured for future real-time features", "Security headers enabled (CSP, XSS protection, frame options)", "Gzip compression active for improved performance"]}
{"type": "entity", "name": "Current Deployment", "entityType": "deployment", "observations": ["Game prototype deployed and accessible from network", "Base Canvas game converted to HTML5 with modern features", "Static file serving operational with proper caching", "Development environment fully configured", "Production nginx configuration ready for deployment", "Git repository with main/dev branches properly managed", "All configuration files documented and version controlled"]}
{"type": "relation", "from": "Galactic Frontier", "to": "Project Structure", "relationType": "has_architecture"}
{"type": "relation", "from": "Galactic Frontier", "to": "Security Issues", "relationType": "has_security_concerns"}
{"type": "relation", "from": "Galactic Frontier", "to": "Configuration Problems", "relationType": "has_configuration_issues"}
{"type": "relation", "from": "Galactic Frontier", "to": "Development Status", "relationType": "has_development_status"}
{"type": "relation", "from": "Galactic Frontier", "to": "Database Config", "relationType": "uses_database"}
{"type": "relation", "from": "Galactic Frontier", "to": "Game Configuration", "relationType": "has_game_settings"}
{"type": "relation", "from": "Project Structure", "to": "Game Configuration", "relationType": "contains_config"}
{"type": "relation", "from": "Configuration Problems", "to": "Security Issues", "relationType": "includes_security_risks"}
{"type": "relation", "from": "Database Config", "to": "Security Issues", "relationType": "has_security_risks"}
{"type": "relation", "from": "Galactic Frontier", "to": "Infrastructure", "relationType": "uses_infrastructure"}
{"type": "relation", "from": "Galactic Frontier", "to": "Network Configuration", "relationType": "has_network_config"}
{"type": "relation", "from": "Galactic Frontier", "to": "Current Deployment", "relationType": "has_deployment"}
{"type": "relation", "from": "Infrastructure", "to": "Network Configuration", "relationType": "includes_networking"}
{"type": "relation", "from": "Infrastructure", "to": "Database Config", "relationType": "manages_database"}
{"type": "relation", "from": "Network Configuration", "to": "Development Status", "relationType": "supports_development"}
{"type": "relation", "from": "Current Deployment", "to": "Project Structure", "relationType": "implements_architecture"}
{"type": "relation", "from": "Galactic Frontier", "to": "Infrastructure", "relationType": "uses_infrastructure"}
{"type": "relation", "from": "Galactic Frontier", "to": "Network Configuration", "relationType": "has_network_config"}
{"type": "relation", "from": "Galactic Frontier", "to": "Current Deployment", "relationType": "has_deployment"}
{"type": "relation", "from": "Infrastructure", "to": "Network Configuration", "relationType": "includes_networking"}
{"type": "relation", "from": "Infrastructure", "to": "Database Config", "relationType": "manages_database"}
{"type": "relation", "from": "Network Configuration", "to": "Development Status", "relationType": "supports_development"}
{"type": "relation", "from": "Current Deployment", "to": "Project Structure", "relationType": "implements_architecture"}
